<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
            Megoldás forrása:    <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/mandelbrot/mandelbrot.cpp">https://github.com/salesz9902/textbook/blob/master/files/mandelbrot/mandelbrot.cpp</link>            
        </para>
        <para>
            A Mandelbrot-halmaz a komplex számsíkon különböző pontok halmaza. Van rá egy rekurzív sorozat, amely abszolút értékben korlátos.
        </para> 
        <para>
            A rekurzív sorozat az alábbi:
            <function>
                x<subscript>n+1</subscript>:=(x<subscript>n</subscript>)<superscript>2</superscript> + c
            </function>
        </para>
        <para>
            A fenti C++ programban a Mandelbrot-halmazt fogjuk ábrázolni, mégpedig egy <code>.png</code> kiterjesztésű képen.
        </para>
        <para>
            Miután lefordítottuk a kódunkat a következőképpen:
            <programlisting>
                g++ mandelbrot.cpp -lpng -o mandel
            </programlisting>
            A forráskódban látszik, hogy futtatás után kapunk egy képet kimenet.png néven egész érdekes eredménnyel.
        </para>
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/kimenet.png" width="50%"/>
            </imageobject>
            
            <caption>
                <para>Mandelbrot által generált default image</para>
            </caption>
            
        </mediaobject> 
        <para>
            Ha a másik módon futtatjuk le a programot, ahol már picit manuálisabban adhatunk meg több értéket is számára, mint például: szélesség, magasság stb.
            <programlisting>
                ./3.1.2 mandel.png 1920 1080 2040 -0.01947381057309366392260585598705802112818 -0.0194738105725413418456426484226540196687 0.7985057569338268601555341774655971676111 0.798505756934379196110285192844457924366
            </programlisting>
            Például ezt kipróbálva a következő kimenetet kapjuk szintén kép formájában:
        </para>
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/mandel2.png" width="50%"/>
            </imageobject>
            
            <caption>
                <para>Mandelbrot által generált image</para>
            </caption>
            
        </mediaobject> 
        <para>
            Egy picit másabb generált kép:
        </para>
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/mandel3.png" width="50%"/>
            </imageobject>
            
            <caption>
                <para>Mandelbrot által generált image</para>
            </caption>
            
        </mediaobject> 
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Megoldás forrása:    <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/mandelbrot/mandelbrot2.cpp">https://github.com/salesz9902/textbook/blob/master/files/mandelbrot/mandelbrot2.cpp</link>       
        </para>
        <para>
            <command>Ebben a feladatban György Dóra tutoráltja voltam.</command>
        </para>
        <para>
            Ezzel a programmal szintén a Mandelbrot-halmazt ábrázoljuk, viszont itt már <code>std::complex</code> osztállyal tesszük meg struktúra alkalmazása helyett.
            Miután fordítottuk, itt is ugyanazt a képet láthatjuk futtatásnál, mint az előbbinél, csupán a forráskód van másképp kivitelezve.
        </para> 
        <para>
            Itt elhagyjuk a struktúra használatát, helyette osztályt használunk. Talán a struktúra használata talán előnyösebb bizonyos szempontokból, bár egyáltalán
            nincs köztük olyan nagy különbség, hogy erős okunk legyen rá.
        </para>
        <para>
            Deklaráljuk a <varname>reC</varname>, <varname>imC</varname>, <varname>reZ</varname> és <varname>imZ</varname> változókat, itt már sejtjük, hogy a komplex 
            számoknak nagy szerepe lesz a programunkban. Ha programunk sikeresen elvégzett minden műveletet, akkor elmentjük a az álláspontot, képet, aztán ezt közöljük 
            is a standard kimeneten.
        </para>
        <para>
            Fordítás:
            <programlisting>
                g++ mandelbrot2.cpp -lpng -03 -o mandelbrot2
            </programlisting>
        </para>
        <para>
            Futtatás:
            <programlisting>
                ./mandelbrot2.cpp mandelcomplex.png 1920 1080 1020 
                0.4127655418209589255340574709407519549131 
                0.4127655418245818053080142817634623497725 
                0.2135387051768746491386963270997512154281 
                0.2135387051804975289126531379224616102874

            </programlisting>
        </para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/mandelbrot/biomorf.cpp">https://github.com/salesz9902/textbook/blob/master/files/mandelbrot/biomorf.cpp</link>
        </para>
        <para>
            A biomorfok jelentősen közel állnak a Mandelbrot-halmazhoz, ugyanis itt szintén a komplex számsíkkal dolgozik a programunk.
        </para>      
        <para>
            Programunk fordítása után, a következőképpen futtassuk:
            <programlisting>
                ./bmorf bmorf.png 800 800 10 -2 2 -2 2 .285 0 10
            </programlisting>
            A fenti esetben ismét egy <code>png</code> kiterjesztésű fájlt fogunk kapni, mégpedig bmorf.png néven. Itt már sokkal színgazdagabb formát fogunk kapni, ami picit látványosabb is.
        </para>       
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/bmorf.png" width="50%"/>
            </imageobject>
            
            <caption>
                <para>Biomorfok által generált image</para>
            </caption>
            
        </mediaobject>           
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <programlisting><![CDATA[
        // mandelpngc_60x60_100.cu
        // Copyright (C) 2019
        // Norbert Bátfai, batfai.norbert@inf.unideb.hu
        //
        //  This program is free software: you can redistribute it and/or modify
        //  it under the terms of the GNU General Public License as published by
        //  the Free Software Foundation, either version 3 of the License, or
        //  (at your option) any later version.
        //
        //  This program is distributed in the hope that it will be useful,
        //  but WITHOUT ANY WARRANTY; without even the implied warranty of
        //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        //  GNU General Public License for more details.
        //
        //  You should have received a copy of the GNU General Public License
        //  along with this program.  If not, see <https://www.gnu.org/licenses/>.
        //
        // Version history
        //
        //  Mandelbrot png
        //  Programozó Páternoszter/PARP
        //   https://www.tankonyvtar.hu/hu/tartalom/tamop412A/2011-0063_01_parhuzamos_prog_linux
        //
        //  https://youtu.be/gvaqijHlRUs
        //

        #include <png++/image.hpp>
        #include <png++/rgb_pixel.hpp>

        #include <sys/times.h>
        #include <iostream>


        #define MERET 600
        #define ITER_HAT 32000

        __device__ int
        mandel (int k, int j)
        {
          // Végigzongorázza a CUDA a szélesség x magasság rácsot:
          // most eppen a j. sor k. oszlopaban vagyunk

          // számítás adatai
          float a = -2.0, b = .7, c = -1.35, d = 1.35;
          int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

          // a számítás
          float dx = (b - a) / szelesseg;
          float dy = (d - c) / magassag;
          float reC, imC, reZ, imZ, ujreZ, ujimZ;
          // Hány iterációt csináltunk?
          int iteracio = 0;

          // c = (reC, imC) a rács csomópontjainak
          // megfelelő komplex szám
          reC = a + k * dx;
          imC = d - j * dy;
          // z_0 = 0 = (reZ, imZ)
          reZ = 0.0;
          imZ = 0.0;
          iteracio = 0;
          // z_{n+1} = z_n * z_n + c iterációk
          // számítása, amíg |z_n| < 2 vagy még
          // nem értük el a 255 iterációt, ha
          // viszont elértük, akkor úgy vesszük,
          // hogy a kiinduláci c komplex számra
          // az iteráció konvergens, azaz a c a
          // Mandelbrot halmaz eleme
          while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
            {
              // z_{n+1} = z_n * z_n + c
              ujreZ = reZ * reZ - imZ * imZ + reC;
              ujimZ = 2 * reZ * imZ + imC;
              reZ = ujreZ;
              imZ = ujimZ;

              ++iteracio;

            }
          return iteracio;
        }


        /*
        __global__ void
        mandelkernel (int *kepadat)
        {

          int j = blockIdx.x;
          int k = blockIdx.y;

          kepadat[j + k * MERET] = mandel (j, k);

        }
        */

        __global__ void
        mandelkernel (int *kepadat)
        {

          int tj = threadIdx.x;
          int tk = threadIdx.y;

          int j = blockIdx.x * 10 + tj;
          int k = blockIdx.y * 10 + tk;

          kepadat[j + k * MERET] = mandel (j, k);

        }

        void
        cudamandel (int kepadat[MERET][MERET])
        {

          int *device_kepadat;
          cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));

          // dim3 grid (MERET, MERET);
          // mandelkernel <<< grid, 1 >>> (device_kepadat);

          dim3 grid (MERET / 10, MERET / 10);
          dim3 tgrid (10, 10);
          mandelkernel <<< grid, tgrid >>> (device_kepadat);  

          cudaMemcpy (kepadat, device_kepadat,
                      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
          cudaFree (device_kepadat);

        }

        int
        main (int argc, char *argv[])
        {

          // Mérünk időt (PP 64)
          clock_t delta = clock ();
          // Mérünk időt (PP 66)
          struct tms tmsbuf1, tmsbuf2;
          times (&tmsbuf1);

          if (argc != 2)
            {
              std::cout << "Hasznalat: ./mandelpngc fajlnev";
              return -1;
            }

          int kepadat[MERET][MERET];

          cudamandel (kepadat);

          png::image < png::rgb_pixel > kep (MERET, MERET);

          for (int j = 0; j < MERET; ++j)
            {
              //sor = j;
              for (int k = 0; k < MERET; ++k)
                {
                  kep.set_pixel (k, j,
                                 png::rgb_pixel (255 -
                                                 (255 * kepadat[j][k]) / ITER_HAT,
                                                 255 -
                                                 (255 * kepadat[j][k]) / ITER_HAT,
                                                 255 -
                                                 (255 * kepadat[j][k]) / ITER_HAT));
                }
            }
          kep.write (argv[1]);

          std::cout << argv[1] << " mentve" << std::endl;

          times (&tmsbuf2);
          std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
            + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

          delta = clock () - delta;
          std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

        }


        ]]>
            
        </programlisting>
        <para>
            Szintén egy összetett feladattal állunk szemben. Ahhoz, hogy megfelelően tudjuk fordítani/futtatni a programot, telepítenünk kell az 
            <code>nvidia-cuda-toolkit</code> nevű csomagot.
        </para>
        <para>
            A programunk konkrétan optimalizálni próbálja a "munkánkat", egy gyorsabb számolást eredményez a háttérben, ami nagyon sok esetben nagy segítségünkre 
            lehet, hiszen ki ne akarná, hogy gyorsabban dolgozzon a gépe.
        </para>
        <para>
            Az optimalizásálásról már korábban is volt szó a könyvben, mégpedig a legelső feladatunkban például, ahol OpenMP segítségével osztottuk fel processzormagokra 
            a végrehajtandó "munkát".
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            <command>A feladatban Molnár Antal Albert könyve volt segítségemre.</command>
        </para>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
            Megoldás forrása:  
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/salesz9902/prog1/tree/master/mandelzoom">https://github.com/salesz9902/prog1/tree/master/mandelzoom</link>
        </para>
        <para>
            Ebben a feladatban egy GUI-t fogunk létrehozni a Qt Creator szoftverrel. (Ez egy multiplatformos keretrendszer, amit épp erre (is) találtak ki.)
        </para>
        <para>
            Tehát itt arról van szó, hogy a Qt Creatorban létre tudunk könnyen hozni egy grafikus felületet az előző C++ kódunkhoz, a Mandelbrot-hoz.
        </para>
        <para>
            YouTube-on rengeteg oktatóvideót találhatunk a Qt Creator szoftverről. Itt is van egy:
        </para>
        <para>
            <link xlink:href="https://www.youtube.com/watch?v=3SIj6zL6mmA">https://www.youtube.com/watch?v=3SIj6zL6mmA</link>
        </para>
        <para>
            Ebből a videóból már tényleg gond nélkül elindulhatunk egy úton a GUI szerkesztés felé. 
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            Hasonló szituációban vagyunk, mint az előző feladatnál. Annyi változik, hogy már egy jóval felhasználóközelibb, magasabb szintű programozási nyelven 
            valósítjuk meg, a Javaban.
        </para>
        <para>
            Itt is rengeteg keretrendszerünk van. A programban nagy a testreszabhatóság lehetősége. Mi magunk adhatjuk meg több paramétereit is a programunk elindulásakor 
            felnyíló ablaknak stb. 
        </para>
        <para>
            A konstruktorban beállíthatjuk a Mandelbrot halmaz paramétereit. Például az élességet. Ami még érdekes lehet számunkra, az nem más, mint a BufferedImage típus, 
            amit a Java biztosít számunkra. Ez tulajdonképpen egy osztály, ami lehetőséget ad, hogy külső könyvtár használata nélkül is képesek legyünk egyszerűen képfájlokat létrehozni.
        </para>
    </section>

</chapter>                
