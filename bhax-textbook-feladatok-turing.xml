<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás forrása:                
        </para>
	<programlisting language="c"><![CDATA[Program procheating
{
	#include <stdio.h>
	#include <omp.h>

	int main()
	{
	#pragma omp parallel for
	for (int i=0; i<10;i++)
	{
		i--;
	}

	}
}]]></programlisting>
        <para>
            Az OpenMP (Open Multi-Processing) egy api, ami támogatja a multi többprocesszoros programozást. Ilyen esetben, ezt sokkal egyszerűbb használni, mintsem elkezdenénk a több-szálkezelő
            (multithread) módszerrel dolgozni..
        </para>
        <para>
	Azt, hogy a program a processzor összes magját kihasználja, OpenMP segítségével oldottam meg. Ez nagyobb programoknál alapszabály, hogy gondoskodjunk a processzor teljes kihasználtságáról.
        </para>     
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/procheating.png"/>
            </imageobject>
            
            <caption>
                <para>Ubuntu linux screenshot</para>
            </caption>
            
        </mediaobject>       
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne végtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Ezt a programot matematikailag lehetetlen megírni számunkra. Ugyanis ilyen program, mint a feladat közben is olvashatjuk nem hozható létre.
            Ha elkezdjük boncolgatni a problémát, újabb problémába ütközünk, hiszen hamar ellentmondást kapunk a dolgok vizsgálata kapcsán... Elvégre többször 
            is bizonyítva volt már sok nagyobb ember által is, hogy a program nem megírható.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            használata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <programlisting language="c"><![CDATA[Program procheating
{
	#include <stdio.h>

        int main()
        {
        //change the values with an extra variable
        int a, b, c;
        a=2;
        b=5;
        c=0;

        //before the trade
        printf("csere elott:\na=%d, b=%d\n",a,b);
        c=a;
        a=b;
        b=c;
        //after the trade
        printf("csere utan:\na=%d, b=%d\n",a,b);

        //no extra variable used..
        //change values with exor
        a=3;
        b=8;

        //values before the trade
        printf("\ncsere exorral:\n");
        printf("csere elott:\na=%d, b=%d\n",a,b);

        a=a+b;
        b=a-b;
        a=a-b;

        printf("csere utan:\na=%d, b=%d\n",a,b);
        }

}]]></programlisting>
            <para>
            Mint fent látható, először segédváltozóval oldom meg a cserét, aztán segédváltozó használata nélkül, művelettel(összeadás, kivonás).
            </para>
            <para>
                Jelen esetben a műveletekkel való csere előtt, az <function>a</function> értéke 3, a <function>b</function> értéke 8. Hogyan is zajlik pontosan itt a csere?
            </para>
            <para>
            Így:
            </para>
            <programlisting>
            a = 3
            b = 8
            a = a + b -> a = 11 (3+8)
            b = a - b -> b = 3 (11-8)
            a = a - b -> a = 8 (11-3)
            </programlisting>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            használata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/turing/bouncingball.c">https://github.com/salesz9902/textbook/blob/master/files/turing/bouncingball.c</link>
        </para>
        <para>
            <command>A programkódok Bátfai Norbert tulajdonában állnak.</command>
        </para>
        <para>
            Ahhoz, hogy a programot megfelelően tudjuk fordítani, használnunk kell a <function>-lncurses</function> kapcsolót a következő módon:
            <programlisting>
            gcc "programneve" -o "futtathatoneve" -lncurses
            </programlisting>
        </para>
        <para>
            Ahhoz, pedig, hogy tudjuk használni a -lncurses kapcsolót, telepítenünk kell a libncurses5-dev-et:
            <programlisting>
                sudo apt-get install libncurses5-dev
            </programlisting>
        </para>
        <para>
            Az if nélküli módszer 
            <programlisting language="c"><![CDATA[Program bouncingball
            {
            #include <stdio.h>
            #include <stdlib.h>
            #include <curses.h>
            #include <unistd.h>

            int main(void)
            {
                int xj = 0, xk = 0, yj = 0, yk = 0;
                int mx = 80 * 2, my = 24 * 2;

                WINDOW *ablak;
                ablak = initscr();
                noecho ();
                cbreak ();
                nodelay (ablak,true);

                for (;;)
                {
                    xj = (xj - 1) % mx;
                    xk = (xk + 1) % mx;

                    yj = (yj - 1) % my;
                    yk = (yk + 1) % my;

                    clear();

                    mvprintw(0, 0,
                             "---------------------------------------------------------------");
                             mvprintw(24, 0,
                             "---------------------------------------------------------------");
                             mvprintw(abs ((yj + (my - yk)) / 2),
                                        abs ((xj + (mx - xk)) / 2), "X");
                    refresh();
                    usleep(150000);
                }
                return 0;
            }

            }]]></programlisting>
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
        <command>A programkód Bátfai Norbert tulajdonában áll.</command>
        </para>
        <para>
            <command>A feladat kidolgozásához Racs Tamás könyvét használtam.</command>
        </para>
        <para>
            Megoldás forrása:
            <programlisting language="c"><![CDATA[Program BogoMIPS
                {
                #include <time.h>
                #include <stdio.h>

                void
                delay (unsigned long long int loops)
                {
                unsigned long long int i;
                for (i = 0; i < loops; i++);
                }

                int
                main (void)
                {
                unsigned long long int loops_per_sec = 1;
                unsigned long long int ticks;

                printf ("Calibrating delay loop..");
                fflush (stdout);

                while ((loops_per_sec <<= 1))
                {
                ticks = clock ();
                delay (loops_per_sec);
                ticks = clock () - ticks;

                printf ("%llu %llu\n", ticks, loops_per_sec);

                if (ticks >= CLOCKS_PER_SEC)
                {
                loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

                printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
                (loops_per_sec / 5000) % 100);

                return 0;
                }
                }

                printf ("failed\n");
                return -1;
                }
                }
                }]]>
                
            </programlisting>
        </para>
        <para>
            A BogoMIPS a processzor egy magjának a gyorsaságát méri meg 1 másodperc alatt. Sokan így akarják összehasonlítani számítógépük erősségét, ezt nem erre találták ki.
            Nyílvánvalóan ez nem lesz annyira pontos, bár eléggé jól megközelíti a valóságot. A programunk kimenetének második oszlopában a 2 hatványai szerepelnek.
            Az első oszlop pedig azt mutatja meg, hogy egyes lépésközzel mennyi ideig jutott el a 0-tól az adott hatvány számolásáig, azaz hányszor tickelt a processzorunk.
        </para>
        <para>
            A program futtatása során az alábbi értékeket kapom:
        </para>
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/bogomips.png"/>
            </imageobject>
            
            <caption>
                <para>Ubuntu linux screenshot</para>
            </caption>
            
        </mediaobject>  
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/turing/pagerank.c">https://github.com/salesz9902/textbook/blob/master/files/turing/pagerank.c</link>
        </para>
        <programlisting language="c"><![CDATA[
            {
            #include <stdio.h>
            #include <math.h>

            void
            kiir (double tomb[], int db)
            {
              int i;

              for (i = 0; i < db; ++i)
                printf ("%f\n", tomb[i]);
            }

            double
            tavolsag (double PR[], double PRv[], int n)
            {
              double osszeg = 0.0;
              int i;

              for (i = 0; i < n; ++i)
                osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);

              return sqrt(osszeg);
            }

            int
            main (void)
            {

              double L[4][4] = {
                {0.0, 0.0, 1.0 / 3.0, 0.0},
                {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
                {0.0, 1.0 / 2.0, 0.0, 0.0},
                {0.0, 0.0, 1.0 / 3.0, 0.0}
              };

              double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
              double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };

              int i, j;

              for (;;)
                {

                  for (i = 0; i < 4; ++i)
                    {
                      PR[i] = 0.0;
                      for (j = 0; j < 4; ++j)
                        PR[i] += (L[i][j] * PRv[j]);
                    }
                  if (tavolsag (PR, PRv, 4) < 0.00000001)
                    break;

                  for (i = 0; i < 4; ++i)
                    PRv[i] = PR[i];

                }

              kiir (PR, 4);

              return 0;
            }
            }]]>
            
        </programlisting>
        <para>
        <command>A programkód Bátfai Norbert tulajdonában áll.</command>
        </para>
        <para>
            A PageRank egy olyan algoritmus, amely linkekhez számokat rendel, majd azokat sorrendbe teszi a hálózatban betöltött szerepük alapján. A Google keresőmotorjának ez az egyik
            legfontosabb eleme. A PageRank szó egyben a a Google bejegyzett védjegye.
        </para>
        <para>
            Ez alapján egyértelműen látjuk, hogy melyik weboldal mennyire fontos, és segítségével hasznos listát tudunk felállítani az oldalak fontosságáról. Nyílvánvalóan ez 
            nem jelenti azt, hogy ha a Google keresőnk ötödjére jelenít meg valamit, hogy nem annyira validok rajta az információk, mintsem az első helyen szereplőnek.
            Közel sem... hiszen ez a kattintásokat veszi figyelembe, ami az oldal népszerűségében nyílvánul meg.
        </para>
        <para>
            A PageRank-ra a következő a képlet: PageRank(i) = (1-d) + d * (Pagerank(j)/L(j))
        </para>
        
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/turing/brun.r">https://github.com/salesz9902/textbook/blob/master/files/turing/brun.r</link>
        </para>
        <programlisting language="r"><![CDATA[Bruntetel
            {
            library(matlab)

            stp <- function(x){

                primes = primes(x)
                diff = primes[2:length(primes)]-primes[1:length(primes)-1]
                idx = which(diff==2)
                t1primes = primes[idx]
                t2primes = primes[idx]+2
                rt1plust2 = 1/t1primes+1/t2primes
                return(sum(rt1plust2))
            }
            }
            ]]>
            
        </programlisting>
        <para>
        <command>A programkód Bátfai Norbert tulajdonában áll.</command>
        </para>
        <para>
            A Brun tétel az ikerprímszámok reciprokaiból képez sorösszegeket, Brun konstans néven ismert véges értékhez konvergál. 
        </para>
        <para>
            A példánkban egy olyan programot írtunk, amely próbálja megközelíteni a Brun konstans értékét. Tehát kiszámolja az ikerprímeket, összegzi a reciprokaikat és részeredményt mutat.
        </para>
        <para>
            Tisztázzuk az ikerprím fogalmát:
        </para>
        <para>
            Ikerprímnek két olyan prímszám együttesét nevezzük, amelyek 2-vel térnek el egymástól: például 5 és 7. Mivel a prímszámok (a 2-t kivéve) csak páratlan számok lehetnek, két prímszám 
            között nem lehet kisebb a különbség 2-nél (a (2, 3) pár kivételével). Más megfogalmazás szerint: az ikerprímek két olyan prímszám együttese, amelyek között a prímhézag 2. 
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/turing/montyhall.r">https://github.com/salesz9902/textbook/blob/master/files/turing/montyhall.r</link>
        </para>
        <para>
            Kép forrása: <link xlink:href="https://probabilityandstats.wordpress.com/2017/05/11/monty-hall-problem/">https://probabilityandstats.wordpress.com/2017/05/11/monty-hall-problem/</link>
        </para>
        <programlisting language="r"><![CDATA[Montyhall
            {
            kiserletek_szama=10000000
            kiserlet = sample(1:3, kiserletek_szama, replace=T)
            jatekos = sample(1:3, kiserletek_szama, replace=T)
            musorvezeto=vector(length = kiserletek_szama)

            for (i in 1:kiserletek_szama) {

                if(kiserlet[i]==jatekos[i]){

                    mibol=setdiff(c(1,2,3), kiserlet[i])

                }else{

                    mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))

                }

                musorvezeto[i] = mibol[sample(1:length(mibol),1)]

            }

            nemvaltoztatesnyer= which(kiserlet==jatekos)
            valtoztat=vector(length = kiserletek_szama)

            for (i in 1:kiserletek_szama) {

                holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
                valtoztat[i] = holvalt[sample(1:length(holvalt),1)]

            }

            valtoztatesnyer = which(kiserlet==valtoztat)


            sprintf("Kiserletek szama: %i", kiserletek_szama)
            length(nemvaltoztatesnyer)
            length(valtoztatesnyer)
            length(nemvaltoztatesnyer)/length(valtoztatesnyer)
            length(nemvaltoztatesnyer)+length(valtoztatesnyer)
            }
            ]]>
            
        </programlisting>
        <para>
        <command>A programkód Bátfai Norbert tulajdonában áll.</command>
        </para>
        <para>
            A Monty Hall egy valószínűségi paradoxon. Az Egyesült Államokban, a Let's Make a Deal televíziós vetélkedő egyik feladatán alapul. Nevét a műsorvezetőről, Monty Hall-ról kapta.
        </para>
        <para>
            A probléma alap kiindulása az, hogy van 3 csukott ajtónk, amelyek közül 2 mögött van valami számunkra értéktelen dolog, viszont az egyik mögött valami rendkívül értékes lapul.
            Azt kapjuk meg, amelyik az általunk választott ajtó mögött van. Tehát létezik egy egyszerű valószínűségszámítási eszköz, amely megmutatja, hogy melyik ajtót érdemes nekünk
            választani az adott esetben.
        </para>
        <para>
            Először tegyük fel, hogy van 1-es 2-es és 3-as ajtónk. A játékosunk először a 3-as ajtót választja. Itt 1/3 eséllyel lesz értékes tárgy. Majd kinyílik a 2-es ajtó. Ez egy 
            értéktelen tárgy lett, ezért ott 0 eséllyel lesz értékes, viszont a mellette lévőben 2/3 az esély.
        </para>
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/montyhall.jpg"/>
            </imageobject>
            
            <caption>
                <para>Az egyik ajtó mögött egy autó, másik kettő mögött kecske található. Az autót keressük. Képen egyértelműen láthatjuk mennyi eséllyel találjuk meg az autót az 
                ajtókban, így, hogy már 1 ajtót kinyitottunk, amiben kecske van.</para>
            </caption>
            
        </mediaobject> 
    </section>

</chapter>                
