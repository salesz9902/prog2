<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás forrása:   <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/chomsky/binarunary.c">https://github.com/salesz9902/textbook/blob/master/files/chomsky/binarunary.c</link>    
        </para>
        <para>
            <command>A programkód Molnár Antal Albert tulajdonában van, picit módosítva lett általam.</command>
        </para>
        <para>
            A Turing-gép Alan Turing angol matematikushoz fűződik, hiszen ő dolgozta ki ennek fogalmát. Ez mindenféle folyamat precízebb megfogalmazására
            lett kitalálva. Például eljárások, algoritmusok pontosabb leírására.
        </para>
        <para>
            Írnom kell az unáris számrendszerről is. Ez egy nagyon egyszerű számrendszer, amiben vonalakkal ábrázoljuk a számokat.
            Vegyük példának az 5-öt, ezt öt vonallal ábrázoljuk, a következőképpen:
        </para> 
            <para>
                <code>||||| = 5</code>
            </para>
        <para>
            A programunk annyit csinál, hogy bekér a felhasználótól egy decimális számot, majd azt kiírja unárisban, 5-ösével elválasztva.
        </para>
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/binarunary.png"/>
            </imageobject>
            
            <caption>
                <para>Ubuntu linux screenshot</para>
            </caption>
            
        </mediaobject>  
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Legyenek <emphasis>S, X, Y</emphasis> változók.
            Legyen <emphasis>a, b, c</emphasis> konstansok.
        </para>
        <para>
            <emphasis>S -> abc, S->aXbc, Xb -> bX, Xc -> Ybcc, bY -> Yb, Ay > aax, Ay -> aa</emphasis>
        </para>
        <para>
            Noam Chomsky szintén egy nyelvész volt, akinek a fenti nyelv grammatikáját is köszönhetjük. Érdekes módon rengeteg kiemelkedő foglalkozása mellett informatikus is volt.
        </para>
        <programlisting>
                <![CDATA[S, X, Y: „változók” (a nemterminálisok)
        a, b, c: „konstansok” (a terminálisok)
        S → abc, S → aXbc, Xb → bX, Xc → Ybcc, bY → Yb, aY -> aaX, aY → aa (a helyettesítési szabályok)
        S (a mondatszimbólum)

            S (S → aXbc)
            aXbc (Xb → bX)
            abXc (Xc → Ybcc)
            abYbcc (bY → Yb)
            aabbcc

            S (S → aXbc)
            aXbc (Xb → bX)
            abXc (Xc → Ybcc)
            abYbcc (bY → Yb)
            aYbbcc (aY -> aaX)
            aaXbbcc (Xb → bX)
            aabXbcc (Xb → bX)
            aabbXcc (Xc → Ybcc)
            aabbYbccc (bY → Yb)
            aabYbbccc (bY → Yb)
            aaYbbbccc (aY → aa)
            aaabbbccc]]> 
        </programlisting>
        <programlisting>
            <![CDATA[A, B, C: „változók” (a nemterminálisok)
            a, b, c: „konstansok” (a terminálisok)
            A → aAB, A → aC, CB → bCc, cB → Bc, C → bc (a képzési szabályok) 
            S (A kezdőszimbólum)

                A (A → aAB)
                aAB ( A → aC)
                aaCB (CB → bCc)
                aabCc (C → bc)
                aabbcc

                A (A → aAB)
                aAB ( A → aAB)
                aaABB ( A → aAB)
                aaaABBB ( A → aC)
                aaaaCBBB (CB → bCc)
                aaaabCcBB (cB → Bc)
                aaaabCBcB (cB → Bc)
                aaaabCBBc (CB → bCc)
                aaaabbCcBc (cB → Bc)
                aaaabbCBcc (CB → bCc)
                aaaabbbCccc (C → bc)
                aaaabbbbcccc]]> 
        </programlisting>

    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás forrása:
            <programlisting language="c"><![CDATA[Program hivatkozasinyelv
               {
                #include <complex.h>
                #include <stdbool.h>

                int main()
                {
                    long long int asd;
                    complex stnum;
                }
           }]]></programlisting>  
        </para>
        <para>
            A C nyelvnek is vannak régebbi, illetve újabb változatai. Ilyen például a C89, illetve a C99. Összehasonlítva a C89-hez képest rengeteg változás történt a C99-ben.
        </para>
        <para>
            Például új header fájlok jöttek be a C99-nél, ilyen a <function>complex.h</function>, <function>stdbool.h</function> vagy a <function>tgmath.h</function>
        </para>
        <para>
            Jelentős újítás volt még például az új típusok: long long int, vagy a complex típus.
        </para>
        <para>
            A fenti kód például C89-ben nem futna le, mivel még nem ismerné a header fájlokat, illetve a long long int típust...
        </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás forrása:  
            <programlisting language="c"><![CDATA[Program lexikalis
                %{
                #include <stdio.h>
                int realnumbers = 0;
                %}
                digit	[0-9]
                %%
                {digit}*(\.{digit}+)?	{++realnumbers; 
                    printf("[realnum=%s %f]", yytext, atof(yytext));}
                %%
                int
                main ()
                {
                 yylex ();
                 printf("The number of real numbers is %d\n", realnumbers);
                 return 0;
                }
           }]]></programlisting>
        </para>
        <para>
            <command>A programkód Bátfai Norbert tulajdonában áll.</command>
        </para>
        <para>
            A programnak megadjuk/definiáljuk a számokat, ezt a <code>[0-9]</code> sorban láthatjuk.
            Itt azt adjuk meg, hogy bármely szám nullától kilencig, hányszor fordulhat elő.
            Az ez utáni sorban a <code>.|\n {}</code> után következő utasításnál többit figyelmen kívül hagyjuk.
        </para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Salesz9902/prog1/blob/master/l33t.c">https://github.com/Salesz9902/prog1/blob/master/l33t.c</link> 
        </para>
        <para>
            <command>A programkód Bátfai Norbert tulajdonában áll.</command>
        </para>
        <para>
            <command>Ebben a feladatban Tóth Balázs volt a tutorom.</command>
        </para>
        <programlisting language="c"><![CDATA[
            {
            %{
            #include <stdio.h>
            #include <stdlib.h>
            #include <time.h>
            #include <ctype.h>

            #define L337SIZE (sizeof l337d1c7 / sizeof (struct cipher))

            struct cipher {
              char c;
              char *leet[4];
            } l337d1c7 [] = {

            {'a', {"4", "4", "@", "/-\\"}},
            {'b', {"b", "8", "|3", "|}"}},
            {'c', {"c", "(", "<", "{"}},
            {'d', {"d", "|)", "|]", "|}"}},
            {'e', {"3", "3", "3", "3"}},
            {'f', {"f", "|=", "ph", "|#"}},
            {'g', {"g", "6", "[", "[+"}},
            {'h', {"h", "4", "|-|", "[-]"}},
            {'i', {"1", "1", "|", "!"}},
            {'j', {"j", "7", "_|", "_/"}},
            {'k', {"k", "|<", "1<", "|{"}},
            {'l', {"l", "1", "|", "|_"}},
            {'m', {"m", "44", "(V)", "|\\/|"}},
            {'n', {"n", "|\\|", "/\\/", "/V"}},
            {'o', {"0", "0", "()", "[]"}},
            {'p', {"p", "/o", "|D", "|o"}},
            {'q', {"q", "9", "O_", "(,)"}},
            {'r', {"r", "12", "12", "|2"}},
            {'s', {"s", "5", "$", "$"}},
            {'t', {"t", "7", "7", "'|'"}},
            {'u', {"u", "|_|", "(_)", "[_]"}},
            {'v', {"v", "\\/", "\\/", "\\/"}},
            {'w', {"w", "VV", "\\/\\/", "(/\\)"}},
            {'x', {"x", "%", ")(", ")("}},
            {'y', {"y", "", "", ""}},
            {'z', {"z", "2", "7_", ">_"}},

            {'0', {"D", "0", "D", "0"}},
            {'1', {"I", "I", "L", "L"}},
            {'2', {"Z", "Z", "Z", "e"}},
            {'3', {"E", "E", "E", "E"}},
            {'4', {"h", "h", "A", "A"}},
            {'5', {"S", "S", "S", "S"}},
            {'6', {"b", "b", "G", "G"}},
            {'7', {"T", "T", "j", "j"}},
            {'8', {"X", "X", "X", "X"}},
            {'9', {"g", "g", "j", "j"}}

          // https://simple.wikipedia.org/wiki/Leet
            };

          %}
          %%
          .	{

                    int found = 0;
                    for(int i=0; i<L337SIZE; ++i)
                    {

                      if(l337d1c7[i].c == tolower(*yytext))
                      {

                        int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));

                    if(r<91)
                          printf("%s", l337d1c7[i].leet[0]);
                    else if(r<95)
                          printf("%s", l337d1c7[i].leet[1]);
                        else if(r<98)
                          printf("%s", l337d1c7[i].leet[2]);
                        else 
                          printf("%s", l337d1c7[i].leet[3]);

                        found = 1;
                        break;
                      }

                    }

                    if(!found)
                       printf("%c", *yytext);	  

                  }
          %%
          int 
          main()
          {
            srand(time(NULL)+getpid());
            yylex();
            return 0;
          }
            }
            ]]>
            
        </programlisting>
        <para>
            A leet nyelv egy internetes nyelv. Bizonyos betű karaktereket számokkal helyettesítünk, amik erősen hasonlítanak a betűkhöz.
        </para>
        <para>
            <programlisting><![CDATA[[
            Például:
            3 = E
            4 = A
            1 = l
            7 = T
                ]]>
            </programlisting>
            A fentiek ismeretében rájöhetünk, hogy a leet szó => 1337 leet nyelven írva. De akár írhatjuk így is: l33t 
        </para>
        <para>
            Programunk annyit csinál, hogy beolvas a terminálról karaktereket, aztán ugyanazt visszaadja leet nyelven, feltéve, hogy definiálva van.
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting> 
                <para>Itt egy egyszerű for ciklust láthatunk, amely 0-tól 5-ig megy. Megfigyelhető, hogy az i inkrementálása prefix formában van jelen.</para>           
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>  
                <para>Szintén, mint az előző, annyi különbséggel, hogy már itt postfix formában inkrementál az i.</para>          
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>     
                <para>Szintén egy for ciklus, ami egy tömb i-edik elemét teszi egyenlővé az i++-szal.</para>       
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
                <para>Itt már találhatunk egy és operátort, ami kettő darab pointert növel eggyel-eggyel.</para>
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>       
                <para>Itt egy printf függvényt láthatunk, amely kiír két változót, ami egy másik függvény visszatérési értéke lesz.</para>     
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>    
                <para> Itt szintén egy függvény visszatérési, illetve egy változó értékét írja ki.</para>        
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>     
                <para>Itt két számot iratunk ki, ugyanazt a változót, viszont először referenciaként hivatkozva rá.</para>       
            </listitem>
        </orderedlist>

        <para>
            Ebben a programban egy jelkezelővel "játszadozhatunk". Ha a program futása során megnyomjuk a Ctrl+C billentyűkombinációt,
            aminek meg kellene szakítani a folyamatot, először nem fogja. Aztán majd mégegyszeri lenyomás után már másképp veszi figyelembe
            az általunk kiküldött jelet a programunk.
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            A LaTeX egy texen alapuló szövegformázó rendszer, amely dokumentumok, szakdolgozatok, akár
            tudományos cikkek írására is használnak. Matematikusok gyakran használják.
        </para>
        <para>
            A következőt másoltam be egy .tex kiterjesztésű fájlba:
            <programlisting language="tex"><![CDATA[
                $\forall x \exists y Szeret(x, y)$
                $\exists y \forall x  Szeret(x, y)$
                $\exists x \forall y  Szeret(x, y)$
                $\exists x  \forall y  \neg  Szeret (x, y)$
                ]]>
            </programlisting>
        </para>
        <para>
            A következőképpen tudjuk a .tex kiterjesztésű fájlunkat .pdf-é varázsolni:
            <programlisting><![CDATA[
                pandoc -t latex logic.tex -o logic.pdf
                ]]>
            </programlisting>
        </para>
        <para>
            A fenti tex-re a következő kimenetet kaptam a pdf-be:
        </para>
        <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/logic.png"/>
            </imageobject>
            
            <caption>
                <para>Ubuntu linux screenshot</para>
            </caption>
            
        </mediaobject>  
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
        <para>
            <command>Ebben a feladatban György Dóra tutora voltam.</command>
        </para>
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/Salesz9902/prog1/blob/master/deklaracio.c">https://github.com/Salesz9902/prog1/blob/master/deklaracio.c</link>
        </para>
        <para>
            Már a legkisebb programokban is találhatunk változó vagy függvénydeklarációt. Ezek kulcsfontosságúak számunkra, hiszen így tudunk tárolni adatokat egyszerűen amiket
            programunk során felhasználunk. Illetve a függvényekkel saját függvényeket is írhatunk.
        </para>
        <para>
            Fontos megemlíteni, hogy egy változó deklarálásakor, akár univerzális, akár konkrét típust, de meg kell adnunk, különben hibaüzenetet fogunk kapni fordításkor.
            Kezdőknél gyakori, hogy a deklarációt összekeverik az értékadással, avagy deklarációnak nevezik az értékadást.
        </para>
        <para>
            A fenti pontokban több féle deklarációkat láthatunk. Az előbb említett értékadás NEM (!) deklaráció. A következőképpen néznek ki:
            <programlisting>
                <![CDATA[
                int a; //deklaráció
                a = 5; //értékadás
                int b = 10; //deklaráció és értékadás egyben
                ]]>
            </programlisting>
        </para>
        <para>
            Ha egy változót deklarálunk, és nem adunk neki értéket, akkor nagy eséllyel valamilyen "memóriaszemetet" kapunk, ugyanis ilyenkor a programunk az adott változóinknak
            véletlenszerűen foglal le helyet a memóriában, így ez keletkezik belőle. Ebből az következik, hogy olyan változóknak, amit még az értékének megváltoztatása előtt ki szeretnénk 
            iratni, akkor ne feltétlenül nullára számítsunk, hiszen közel sem biztos, hogy az lesz a kezdőértéke. Ezt az alábbi példában láthatjuk:
            <programlisting language="c"><![CDATA[
                #include <stdio.h>

                int main() 
                {
                    int a, b, c, d, e, f, g;
                    printf("%d, %d, %d, %d, %d, %d, %d\n", a,b,c,d,e,f,g);
                }
                ]]>
            </programlisting>
        </para>
        <para>
            A program futtatása, kimenete:
            <mediaobject>
            
            <imageobject>
                <imagedata fileref="../pictures/memtrash.png"/>
            </imageobject>
            <caption>
                <para>Ubuntu linux screenshot</para>
            </caption>
            
        </mediaobject>
        </para>
    </section>                     


</chapter>                
