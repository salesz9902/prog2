<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
            Megoldás forrása:      <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/caesar/double_trimatrix.c">https://github.com/salesz9902/textbook/blob/master/files/caesar/double_trimatrix.c</link>
        </para>
        <para>
            <command>A programkód Bátfai Norbert tulajdonában áll.</command>
        </para>
        <para>
            Elsősorban megadjuk a mátrix sorainak számát. <function>int nr = 5</function>
            Ezután deklarálunk egy valós értékre mutató mutatót.
        </para>
        <para>
            Érdemes megfigyelnünk a <function>malloc</function> függvényt. 
            5-ször 8 bájtot foglal le, és egy mutatót ad vissza. Ha 0 a méret, akkor a függvény NULL-t vagy egy egyéni mutatót ad vissza.
            Az egyik <function>for</function> ciklusban <function>nr</function> alkalommal (azaz 5) a <function>malloc</function> segítségével
            tm[i]-nek lefoglalja a helyet. Az elsőnél 8 bájtot, aztán 16-ot, aztán 32-t és így tovább az 5.-ig.
        </para>
        <para>
            Futtatásnál a következő kimenetet láthatjuk:
            <programlisting>
                ./double_trimatrix 
                0x7ffce6bf4d40
                0x55eba3f9a670
                0x55eba3f9a6a0
                0.000000, 
                1.000000, 2.000000, 
                3.000000, 4.000000, 5.000000, 
                6.000000, 7.000000, 8.000000, 9.000000, 
                10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 
                0.000000, 
                1.000000, 2.000000, 
                3.000000, 4.000000, 5.000000, 
                42.000000, 43.000000, 44.000000, 45.000000, 
                10.000000, 11.000000, 12.000000, 13.000000, 14.000000
            </programlisting>
        </para>
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás forrása:      <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/caesar/exor_task/xor.c">https://github.com/salesz9902/textbook/blob/master/files/caesar/exor_task/xor.c</link>          
        </para>
        <para>
            <command>A programkód Bátfai Norbert tulajdonában áll.</command>
        </para>
        <para>
            <command>Ebben a feladatban Tóth Balázs tutorált.</command>
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        #include <unistd.h>
        #include <string.h>

        #define MAX_KULCS 100
        #define BUFFER_MERET 256


        int
        main (int argc, char **argv)
        {

          char kulcs[MAX_KULCS];
          char buffer[BUFFER_MERET];

          int kulcs_index = 0;
          int olvasott_bajtok = 0;

          int kulcs_meret = strlen (argv[1]);
          strncpy (kulcs, argv[1], MAX_KULCS);

          while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
            {

              for (int i = 0; i < olvasott_bajtok; ++i)
                {

                  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
                  kulcs_index = (kulcs_index + 1) % kulcs_meret;

                }

              write (1, buffer, olvasott_bajtok);

            }
        }    
        ]]>
        </programlisting>
        <para>
            Egy olyan program, amely általunk megadott kulcs, illetve karakterhossz által generál nekünk egy titkos szöveget, amit az előbb említett adatok felhasználásával tudunk feltörni.
            Sok esetben hasznunkra lehet.
        </para>   
        <para>
            A main függvényünknél érdemes megfigyelni a paraméterként adott argumentumokat, mégpedig <function>argc</function> és <function>**argv</function>. Az argc a 
            futtatásnál terminálon keresztül bekért adatok számáért felel, ha lehet így fogalmazni. A **argv pedig eltárolja a beolvasott argumentumokat, egyesével. 
        </para>         
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <command>A programkód Molnár Antal Albert tuladonában áll.</command>
        </para>
        <programlisting language="java"><![CDATA[
            import java.util.*;

            class XorEncode {
                    public static void main(String[] args) {
                            String kulcs = "";

                            if(args.length > 0) {
                                    kulcs = args[0];
                            } else {
                                    System.out.println("Kulcs nelkul nem titkositok!");
                                    System.out.println("Hasznalat: java XorEncode.java [kulcs]");
                                    System.exit(-1);
                            }

                            Scanner sc = new Scanner(System.in);
                            String str = "";

                            while(sc.hasNext()) {
                                    str = sc.next();
                                    System.out.println(xor(kulcs, str));
                            }
                    }

                    public static String xor(String kulcs, String s) {
                            StringBuilder sb = new StringBuilder();

                            for(int i = 0; i < s.length(); i++) {
                                    sb.append((char)(s.charAt(i) ^ kulcs.charAt(i % kulcs.length())));
                            }

                            return sb.toString();
                    }
            }
            ]]>
            
        </programlisting>
        <para>
            Ebben a feladatban ugyanazt írjuk meg, mint az előzőben, csak nem C-ben, hanem egy erősen objektum orientált nyelvben, a Java-ban.
        </para>            
        <para>
            A program ugyan úgy működik, mint C elődje, szintén a bekért szöveget titkosítja.
        </para>
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás forrása:       <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/caesar/exor_task/exor.c">https://github.com/salesz9902/textbook/blob/master/files/caesar/exor_task/exor.c</link>         
        </para>
        <para>
            <command>A programkód Bátfai Norbert tulajdonában van.</command>
        </para>
        <para>
            <command>Ebben a feladatban Butcovan György tutorált.</command>
        </para>
        <programlisting language="c"><![CDATA[
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

  for (int i = 0; i < titkos_meret; ++i)
    {

      titkos[i] ^= kulcs[i%kulcs_meret];

    }

}

char *
szo_xor(char * szo,const char kulcs[],int index)
{
    int len=strlen(szo);

    for(int i=0;i<len;i++)
    {
      szo[i]^=kulcs[index%KULCS_MERET];
      index++;
    }
    return szo;
}

int
main (void)
{

  char kulcs[KULCS_MERET];
  char titkos[MAX_TITKOS];
  char *p = titkos;
  int olvasott_bajtok;
  char w[20];


  // titkos fajt berantasa
  while ((olvasott_bajtok = read (0, (void *) p, (p - titkos + OLVASAS_BUFFER < MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
    p += olvasott_bajtok;

  // maradek hely nullazasa a titkos bufferben  
  for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
    titkos[p - titkos + i] = '\0';

  //printf("hossz:%d\n",strlen(titkos));

  // osszes kulcs eloallitasa
  for (int ii = '0'; ii <= '9'; ++ii)
    for (int ji = '0'; ji <= '9'; ++ji)
      for (int ki = '0'; ki <= '9'; ++ki)
        for (int li = '0'; li <= '9'; ++li)
          for (int mi = '0'; mi <= '9'; ++mi)
            for (int ni = '0'; ni <= '9'; ++ni)
              for (int oi = '0'; oi <= '9'; ++oi)
                for (int pi = '0'; pi <= '9'; ++pi)
                  {
                    kulcs[0] = ii;
                    kulcs[1] = ji;
                    kulcs[2] = ki;
                    kulcs[3] = li;
                    kulcs[4] = mi;
                    kulcs[5] = ni;
                    kulcs[6] = oi;
                    kulcs[7] = pi;



for(int jj=0;jj<KULCS_MERET;jj++)
{

  strcpy(w,"és ");
 if(memmem(titkos,p-titkos,szo_xor(w,kulcs,jj),strlen(w)))		//talalt =1, vagy nem=0
  {
for(int kk=0;kk<KULCS_MERET;kk++)
{
    strcpy(w,"amelyik ");

    if(memmem(titkos,p-titkos,szo_xor(w,kulcs,kk),strlen(w)))//talalt =1, vagy nem=0
    {

        for(int ll=0;ll<KULCS_MERET;ll++)
        {
              strcpy(w," olyan ");

              if(memmem(titkos,p-titkos,szo_xor(w,kulcs,ll),strlen(w)))//talalt =1, vagy nem=0
              {//printf("%s\n",w);
                  for(int mm=0;mm<KULCS_MERET;mm++)
                  {
                        strcpy(w,"ezért ");
                        if(memmem(titkos,p-titkos,szo_xor(w,kulcs,mm),strlen(w)))	//talalt =1, vagy nem=0
                        {
                          exor(kulcs, KULCS_MERET, titkos, p - titkos);
                          printf("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
                              ii, ji, ki, li, mi, ni, oi, pi,	titkos);
                             // ujra EXOR-ozunk, igy nem kell egy masodik buffer  
                          exor(kulcs, KULCS_MERET, titkos, p - titkos);
                        }
                            }
                        }
                  }
              }
          }
      }
    }





    }    

  return 0;
}
            ]]>
            
        </programlisting>
        <para>
            Ha tudjuk a kulcsot, illetve a karakterhosszat, könnyen feltörhetjük az exor titkosított kódot az adatok megadásával. Ezzel a módszerrel akár üzenhetünk is társunknak, 
            illetve olyan szövegeket törhetünk vele, amiről tudjuk mi alapján lett titkosítva.
        </para>       
        <para>
            Ebben a programkódban a Brute force-ot alkalmazzuk, annak segítségével törjük fel a szöveget és a kulcsot, ez addig fut, amíg nem ütközik helyes megoldásba.
        </para>     
        <para>
            Van egy függvényünk, név szerint <function>exor</function>, ami maga az exor művelet végzi el számunkra. A kulcsokat egy kulcs nevű tömbben tároljuk, mégpedig 
            a main függvényen belül, illetve az olvasott bájtok mérete szintén itt van tárolva. A read segítségével beolvassuk a titkos szöveget, ezzel már visszakapjuk 
            visszatérési értékként a beolvasott szöveget is.
        </para>
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            A neurális hálózat biológiai neuronok összekapcsolt csoportja. Két koncepcióból jött létre, mégpedig a biológiai és a mesterséges neurális hálózatok ötvözetéből.
            Az agyunkban is neuronok találhatóak, amik hasonló elven működnek, mint itt, csak magától értetődően természetes módon...
        </para>
        <para>
            Itt egy neurális hálót készítünk R nyelvben. A neurális háló mesterséges oldala úgy néz ki, hogy megadjuk a programunknak, milyen bemenetre milyen kimenetet adjon, 
            aztán ezt a programunk ennek alapján elkezdi leutánozni egy bizonyos szinten.
        </para>          
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás forrása:      <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/caesar/perceptron/ql.hpp">https://github.com/salesz9902/textbook/blob/master/files/caesar/perceptron/ql.hpp</link>
            <link xlink:href="https://github.com/salesz9902/textbook/blob/master/files/caesar/perceptron/main.cpp">https://github.com/salesz9902/textbook/blob/master/files/caesar/perceptron/main.cpp</link>
        </para>
        <para>
            <command>A programkódok Bátfai Norbert tulajdonában vannak.</command>
        </para>
        <programlisting language="c"><![CDATA[
            #include <iostream>
            #include "ql.hpp"
            #include <png++/png.hpp>


            int main(int argc, char **argv)
            {
                png::image <png::rgb_pixel> png_image (argv[1]);

                int size = png_image.get_width() * png_image.get_height();

                Perceptron* p = new Perceptron(3, size, 256, 1);

                double* image = new double[size];

                for(int i{0}; i<png_image.get_width(); ++i)
                 for(int j{0}; j<png_image.get_height(); ++j)
                    image[i*png_image.get_width()+j] = png_image[i][j].red;

                double value = (*p)(image);

                std::cout << value << std::endl;

                delete p;
                delete [] image;
            }

        ]]>
            
        </programlisting>
        <para>
            Ezt a neuronmodellt a 20. század közepén használták először hatékony képfelismerő algoritmusként.
        </para>
        <para>
            A perceptron hátránya, hogy kettőnél több réteg esetén a tanítása nehezen kivitelezhető, ugyanis azok a gradiensereszkedések, melyek egy veszteségfüggvényt próbálnak iteratív módon minimalizálni, 
            és ehhez a függvény gradiensével számolnak.
        </para>
        <para>
            A program fordításához telepítenünk kell a libpng++-t.
            <programlisting>
                sudo apt install libpng++
            </programlisting>
        </para>
        <para>
            A programot a következőképpen kell fordítanunk:
            <programlisting>
                g++ ql.hpp main.cpp -o perc -lpng -std=c++11
            </programlisting>
            Aztán futtatni a következőképp:
            <programlisting>
                ./perc (something.png)
            </programlisting>
            Használjuk például a mandelbrotnál legenerált png képünket.
        </para>
        <para>
            A programunk kielemzi a képet, aztán a képünk alapján visszaad egy értéket.  
        </para>
    </section>        
        

</chapter>                
